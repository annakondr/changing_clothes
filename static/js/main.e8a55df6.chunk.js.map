{"version":3,"sources":["redux/actions.js","redux/reducers.js","Components/Clothes.js","Components/ClothesHandler.js","App.js","serviceWorker.js","index.js"],"names":["EDIT_START","EDIT_PROGRESS","CANCELING","UPDATE_LIST","initialState","clothes","edit","textInput","selected","Clothes","props","react_default","a","createElement","map","item","index","key","className","type","defaultValue","onChange","event","inputChanged","target","value","onKeyDown","clickEnter","clickEsc","disabled","onClick","editClicked","ClothesHandler","connect","state","ownProps","dispatch","startEdit","input","progressEdit","store","createStore","arguments","length","undefined","action","Object","objectSpread","toConsumableArray","filter","App","es","Components_ClothesHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8a55df6.chunk.js","sourcesContent":["export const EDIT_START = 'START EDIT';\nexport const EDIT_PROGRESS = 'PROGRESS EDIT';\nexport const CANCELING = 'EDIT ESC';\nexport const UPDATE_LIST = 'EDIT ENTER';\n\nexport function startEdit(index) {\n  return {\n    type: EDIT_START,\n    index\n  };\n}\n\nexport function progressEdit(input) {\n  return {\n    type: EDIT_PROGRESS,\n    input\n  };\n}\n\nexport function cancelEdit() {\n  return {\n    type: CANCELING\n  };\n}\n\nexport function updateList() {\n  return {\n    type: UPDATE_LIST\n  };\n}\n","import {CANCELING, EDIT_PROGRESS, EDIT_START, UPDATE_LIST} from './actions';\n\nconst list = [\n  'Apron',\n  'Belt',\n  'Cardigan',\n  'Dress',\n  'Earrings',\n  'Fur coat',\n  'Gloves',\n  'Hat',\n];\n\nconst initialState = {\n  clothes: list,\n  edit: false,\n  textInput: '',\n  selected: null\n};\n\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case EDIT_START:\n      return {\n        ...state,\n        edit: true,\n        selected: action.index\n      };\n    case EDIT_PROGRESS:\n      return {\n        ...state,\n        textInput: action.input\n      };\n    case CANCELING:\n      return {\n        ...state,\n        selected: null\n      };\n    case UPDATE_LIST:\n      if (state.textInput === '') {\n        return {\n          ...state,\n          clothes: [...state.clothes].filter((item, index) => {\n            return state.selected !== index\n          }),\n          selected: null\n        };\n      }\n      return {\n        ...state,\n        clothes: [...state.clothes].map((item, index) => {\n          if (state.selected !== index) {\n            return item\n          } else {\n            return state.textInput\n          }\n        }),\n        edit: false,\n        selected: null\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport './Clothes.css'\n\nfunction Clothes(props) {\n  const {clothes, edit, textInput, selected} = props;\n\n  return (\n    <ul>\n      {clothes.map((item, index) => {\n        if (!edit || index !== selected) {\n          return (\n            <li key={item}>\n              <span className='item'>{item}</span>\n              <button onClick = {() => props.editClicked(index)}> Edit </button>\n            </li>)\n        } else {\n          return (\n            <li key={item} className={edit ? 'selected' : ''}>\n              <input type='text' defaultValue={item}\n                     onChange={(event) => props.inputChanged(event.target.value)}\n                     onKeyDown={(event) => {\n                       if(event.key === 'Enter') {\n                         props.clickEnter(textInput)\n                       } else if(event.key === 'Escape') {\n                         props.clickEsc()\n                       }\n                     }\n                     }\n              />\n              <button disabled={true}> Edit </button>\n            </li>\n          )\n        }\n      })\n      }\n    </ul>\n  )\n}\n\nexport default Clothes;\n","import {connect} from 'react-redux'\nimport Clothes from './Clothes';\nimport {startEdit, progressEdit, cancelEdit, updateList} from '../redux/actions'\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    clothes: state.clothes,\n    edit: state.edit,\n    textInput: state.textInput,\n    selected: state.selected\n  }\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    editClicked: (index) => dispatch(startEdit(index)),\n    inputChanged: (input) => dispatch(progressEdit(input)),\n    clickEsc: () => dispatch(cancelEdit()),\n    clickEnter: (input) => dispatch(updateList(input)),\n  }\n}\n\nconst ClothesHandler = connect(mapStateToProps, mapDispatchToProps)(Clothes);\n\nexport default ClothesHandler;\n","import React from 'react';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux'\nimport {getNextState} from './redux/reducers';\nimport ClothesHandler from './Components/ClothesHandler';\n\n\nconst store = createStore(getNextState);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ClothesHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}